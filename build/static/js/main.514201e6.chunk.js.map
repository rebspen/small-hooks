{"version":3,"sources":["components/input.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","useState","input","setInput","output","setOutput","language","setLanguage","loading","setLoading","useEffect","console","log","TopBarProgress","config","barColors","shadowBlur","barThickness","className","onChange","event","a","async","preventDefault","target","value","placeholder","type","name","onClick","fetch","then","response","ok","Error","json","data","catch","err","contents","translated","App","params","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wSA6EeA,G,MAxED,SAAAC,GAAU,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAEOF,mBAAS,IAFhB,mBAEdG,EAFc,KAENC,EAFM,OAGWJ,mBAAS,cAHpB,mBAGdK,EAHc,KAGJC,EAHI,OAISN,oBAAS,GAJlB,mBAIdO,EAJc,KAILC,EAJK,KAmDrB,OA7CAC,qBAAU,WACVC,QAAQC,IAAI,kBACZD,QAAQC,IAAIV,KACT,CAACA,EAAOE,EAAOE,IAiClBO,IAAeC,OAAO,CACpBC,UAAW,CACT,EAAK,UACL,MAAO,WAETC,WAAY,EACZC,aAAc,IAId,yBAAKC,UAAY,QACjB,8CACA,4BAAQA,UAAW,aAAaC,SAtClC,SAAgCC,GAAhC,SAAAC,EAAAC,OAAA,gDACEF,EAAMG,iBACNhB,EAAYa,EAAMI,OAAOC,OAF3B,uCAuCE,wDACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,QAAd,SAEA,2BAAOC,YAAc,gBAAgBC,KAAK,OAAOC,KAAK,SAAST,SAnDjE,SAA4BC,GAA5B,SAAAC,EAAAC,OAAA,gDACEF,EAAMG,iBACNpB,EAASiB,EAAMI,OAAOC,OAFxB,wCAoDE,4BAAQI,QA1CV,SAA4BT,GAA5B,SAAAC,EAAAC,OAAA,gDACEF,EAAMG,iBACNd,GAAW,GACXE,QAAQC,IAAI,6BAA8BV,GAC1C4B,MAAM,6CAA+CxB,EAAW,cAAgBJ,GAC/E6B,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,wBAElB,OAAOF,EAASG,UAEjBJ,MAAK,SAAAK,GACJzB,QAAQC,IAAIwB,GACZ3B,GAAW,GACXJ,EAAU+B,MAEXC,OAAM,SAAAC,GACL3B,QAAQC,IAAI0B,MAjBhB,uCA0CE,aACC9B,GAAW,kBAAC,IAAD,MACXJ,GAAW,gCAAMA,EAAOmC,SAASC,WAAtB,Q,gBClCDC,G,MA7BH,SAAAzC,GACV,OACE,yBAAKkB,UAAU,OACd,kBAAC,IAAD,CACAA,UAAU,YACPwB,OAAQ,CACX,UAAa,CACT,OAAU,CACN,MAAS,IAEb,KAAQ,CACJ,MAAS,IAGjB,cAAiB,CACb,OAAU,CACN,QAAW,CACP,QAAU,EACV,KAAQ,gBAMrB,kBAAC,EAAD,SCnBgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.514201e6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TopBarProgress from \"react-topbar-progress-indicator\";\n\nimport \"./input.css\"\n\nconst Input = props => {\n  const [input, setInput] = useState(\"\");\n  const [output, setOutput] = useState(\"\");\n  const [language, setLanguage] = useState(\"australian\");\n  const [loading, setLoading] = useState(false);\n\n  useEffect(()=>{\n  console.log('useEffect runs');\n  console.log(input)\n  }, [input, output,language]);\n\n  async function handleChange(event){\n    event.preventDefault();\n    setInput(event.target.value);\n  }\n\n  async function handleLangChange(event){\n    event.preventDefault();\n    setLanguage(event.target.value);\n  }\n\n  async function getTranslate(event){\n    event.preventDefault();\n    setLoading(true);\n    console.log(\"Getting translation for...\", input);\n    fetch('https://api.funtranslations.com/translate/' + language + '.json?text=' + input)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Could not translate!');\n      }\n      return response.json();\n    })\n    .then(data => {\n      console.log(data)\n      setLoading(false);\n      setOutput(data)\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  TopBarProgress.config({\n    barColors: {\n      \"0\": \"#ff00ff\",\n      \"1.0\": \"#ff00ff\"\n    },\n    shadowBlur: 5,\n    barThickness: 8\n  });\n\n  return (\n    <div className = \"main\">\n    <h1>Translate Mate</h1>\n    <select className= \"select-css\" onChange={handleLangChange}>\n    <option>Choose your language</option>\n    <option value=\"australian\">Australian</option>\n    <option value=\"minion\">Minion</option>\n    <option value=\"pirate\">Pirate</option>\n    <option value=\"cockney\">Cockney</option>\n    <option value=\"yoda\">Yoda</option>\n    </select>\n    <input placeholder = \"Write here...\" type=\"text\" name=\"phrase\" onChange={handleChange}></input>\n    <button onClick={getTranslate}>translate</button>\n    {loading && <TopBarProgress />}\n    {output && (<h2>\"{output.contents.translated}\"</h2>)}\n    </div>\n    \n  );\n  \n}\n\nexport default Input;","import React from 'react';\nimport Input from './components/input'\nimport Particles from 'react-particles-js';\n \n\nimport './App.css';\n\nconst App = props => {\n  return (\n    <div className=\"App\">\n     <Particles \n     className=\"particles\"\n        params={{\n\t    \"particles\": {\n\t        \"number\": {\n\t            \"value\": 50\n\t        },\n\t        \"size\": {\n\t            \"value\": 3\n\t        }\n\t    },\n\t    \"interactivity\": {\n\t        \"events\": {\n\t            \"onhover\": {\n\t                \"enable\": true,\n\t                \"mode\": \"repulse\"\n\t            }\n\t        }\n\t    }\n\t}}\n     />\n    <Input/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}